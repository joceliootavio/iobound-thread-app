version: '3.8'
services:
  postgres:
    image: postgres:latest
    container_name: postgres_container
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: performance_test
    ports:
      - "5432:5432"
    volumes:
      - ./init-scripts:/docker-entrypoint-initdb.d

  k6:
    image: grafana/k6:latest
    container_name: k6
    entrypoint: ["k6", "run", "/scripts/test.js"]
    environment:
      - K6_OUT=influxdb=http://influxdb:8086/k6
      - APP_CONTEXT=http://java-app:8080
#      - APP_CONTEXT=https://java-app-mock:8443
#      - APP_PATH=/api/blocking/from-api/user?delay=200&times=2&memoryOps=true&async=false
#      - APP_PATH=/mock/user
      - APP_PATH=/api/blocking/from-rds/123
      - P95_TARGET=25
#      - DURATION=300s
#      - MAX_VUS=100
#      - RPS=2000
    volumes:
      - ./k6-scripts:/scripts

  java-app:
    image: openjdk:21-jdk
    container_name: java_app
    environment:
      JDBC_URL: "postgres_container"
      VIRTUAL_THREADS: "true"
#      REST_URI: "http://java-app-mock:8080"
      REST_URI: "https://java-app-mock:8443"
    volumes:
      - .:/app
    working_dir: /app
    command:
      [
        "sh", "-c",
        "ls -la /app/certs && \
        java 
         -Djavax.net.ssl.trustStore=/app/certs/keystore.p12 
         -Djavax.net.ssl.trustStorePassword=changeit
         -Dcom.sun.management.jmxremote.port=5000
         -Dcom.sun.management.jmxremote.rmi.port=5000
         -Dcom.sun.management.jmxremote.local.only=false
         -Dcom.sun.management.jmxremote.authenticate=false
         -Dcom.sun.management.jmxremote.ssl=false
         -Djava.rmi.server.hostname=localhost
         -jar target/iobound-thread-app-0.0.1-SNAPSHOT.jar"
      ]
    ports:
      - "8081:8080"
      - "5000:5000"
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: "2g"

  # Novo container usando imagem nativa do GraalVM
  java-app-native:
    image: graalvm-native-app:latest # Nome da imagem gerada pelo build nativo
    build:
      context: .
      dockerfile: Dockerfile-native # Dockerfile espec√≠fico para o build nativo
    container_name: java_app_native
    environment:
      JDBC_URL: "postgres_container"
      REST_URI: "https://java-app-mock:8443"
    ports:
      - "8082:8080"
    deploy:
      resources:
        limits:
          cpus: "1.5"
          memory: "2g"
    depends_on:
      - postgres

  influxdb:
    image: influxdb:1.11.8
    container_name: influxdb
    environment:
      INFLUXDB_DB: k6
      INFLUXDB_ADMIN_USER: admin
      INFLUXDB_ADMIN_PASSWORD: admin123
    ports:
      - "8086:8086"
    volumes:
      - influxdb-data:/var/lib/influxdb

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./certs:/certs
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./provisioning:/etc/grafana/provisioning
    depends_on:
      - influxdb
      - prometheus

  java-app-mock:
    build:
      context: .
      dockerfile: Dockerfile-mock
    container_name: java_app_mock
    environment:
      JDBC_URL: "postgres_container"
      SERVER_PORT: "8443"
      SERVER_SSL_KEY_STORE: "/app/certs/keystore.p12"
      SERVER_SSL_KEY_STORE_PASSWORD: "changeit"
      SERVER_SSL_KEY_STORE_TYPE: "PKCS12"
      SERVER_SSL_KEY_ALIAS: "mycert"
    ports:
      - "8083:8080"
      - "8443:8443"
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: "2g"
    depends_on:
      - postgres
    volumes:
      - ./certs:/app/certs

volumes:
  influxdb-data:
  grafana-data:
