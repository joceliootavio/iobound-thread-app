version: '3.8'
services:
  postgres:
    image: postgres:latest # Usa a versão mais recente do PostgreSQL
    container_name: postgres_container
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: performance_test
    ports:
      - "5432:5432"
    volumes:
      - ./init-scripts:/docker-entrypoint-initdb.d # Mapeia o volume para scripts de inicialização

  k6:
    image: grafana/k6:latest # Usa a imagem oficial do k6
    container_name: k6
    entrypoint: ["k6", "run", "/scripts/test.js"] # Define o comando de execução do k6
    environment:
      - K6_OUT=influxdb=http://influxdb:8086/k6
      - APP_HOST=java-app
      - APP_PORT=8080
      - APP_PATH=/api/blocking/from-api/user?delay=200&times=2&memoryOps=true&async=false
#      - APP_PATH=/api/coroutine/from-api/user?delay=200&times=2
#      - APP_PATH=/mock/user?delay=100
      - DURATION=600s
      - VUS=100
      - MAX_VUS=200
      - RPS=400
    volumes:
      - ./k6-scripts:/scripts # Mapeia o volume para os scripts de teste

  java-app:
    image: openjdk:21-jdk # Usa Maven com JDK 21
#    build: .
    container_name: java_app
    environment:
      JDBC_URL: "postgres_container"
      VIRTUAL_THREADS: "true"
#      SERVER_UNDERTOW_THREADS_WORKER: "200"
      REST_URI: "http://java-app-mock:8080"
    volumes:
      - .:/app # Mapeia o código-fonte para o container
    working_dir: /app
    command:
      [
        "sh", "-c",
        "ls -la /app/certs && \
        java
         -Djavax.net.ssl.trustStore=/app/certs/keystore.p12 
         -Djavax.net.ssl.trustStorePassword=changeit
         -Dcom.sun.management.jmxremote.port=5000
         -Dcom.sun.management.jmxremote.rmi.port=5000
         -Dcom.sun.management.jmxremote.local.only=false
         -Dcom.sun.management.jmxremote.authenticate=false
         -Dcom.sun.management.jmxremote.ssl=false
         -Djava.rmi.server.hostname=localhost
         -jar target/iobound-thread-app-0.0.1-SNAPSHOT.jar"
      ]
    ports:
      - "8081:8080"
      - "5000:5000"
    deploy:
      resources:
        limits:
          cpus: "2.0" # Limita o uso de CPU a 0.5 core
          memory: "4g" # Limita o uso de memória a 1 GB

  influxdb:
    image: influxdb:1.11.8 # Usa a imagem oficial do InfluxDB
    container_name: influxdb
    environment:
      INFLUXDB_DB: k6 # Nome do banco de dados para o k6
      INFLUXDB_ADMIN_USER: admin
      INFLUXDB_ADMIN_PASSWORD: admin123
    ports:
      - "8086:8086" # Porta padrão do InfluxDB
    volumes:
      - influxdb-data:/var/lib/influxdb # Volume para persistência de dados

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml # Configuração do Prometheus
      - ./certs:/certs
    ports:
      - "9090:9090" # Porta padrão do Prometheus

  grafana:
    image: grafana/grafana:latest # Usa a imagem oficial do Grafana
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin # Usuário padrão do Grafana
      - GF_SECURITY_ADMIN_PASSWORD=admin123 # Senha padrão do Grafana
    ports:
      - "3000:3000" # Porta padrão do Grafana
    volumes:
      - grafana-data:/var/lib/grafana # Volume para persistência de dados
      - ./provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./provisioning:/etc/grafana/provisioning # Volume para provisionamento
    depends_on:
      - influxdb
      - prometheus

  java-app-mock:
    build:
      context: .
      dockerfile: Dockerfile-mock
    container_name: java_app_mock
    environment:
      JDBC_URL: "postgres_container" # Configura a memória máxima e mínima para 2 GB
#      VIRTUAL_THREADS: "true"
#      SERVER_PORT: "8443"
#      SERVER_SSL_KEY_STORE: "/app/certs/keystore.p12"
#      SERVER_SSL_KEY_STORE_PASSWORD: "changeit"
#      SERVER_SSL_KEY_STORE_TYPE: "PKCS12"
#      SERVER_SSL_KEY_ALIAS: "mycert"
    ports:
      - "8083:8080"
      - "8443:8443"
    deploy:
      resources:
        limits:
          cpus: "2.0" # Limita o uso de CPU a 1 core
          memory: "2g" # Limita o uso de memória a 2 GB
    depends_on:
      - postgres

volumes:
  influxdb-data:
  grafana-data: